/**
 * created on 2018年3月1日 下午4:23:07
 */
package RabbitMq.rabbitmq;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.ConsumerCancelledException;
import com.rabbitmq.client.QueueingConsumer;
import com.rabbitmq.client.QueueingConsumer.Delivery;
import com.rabbitmq.client.ShutdownSignalException;

/**
 * @author BenQ
 * @date 2018年3月1日
 *
 */
public class Test2 {
	public static void main(String[] args)throws IOException,ShutdownSignalException
	,ConsumerCancelledException, InterruptedException, TimeoutException {
		//创建链接工厂
		ConnectionFactory connFac = new ConnectionFactory();
		
		//默认链接的主机名，RabbitMQ-Server安装在本机，所以可以直接用127.0.0.1
		connFac.setHost("127.0.0.1");
		
		//创建链接
		Connection conn = connFac.newConnection();
		
		//创建信息管道
		Channel channel = conn.createChannel();
		
		//定义Queue名称
		String queueName = "queue01";
		
		//1.队列名   2.是否持久化, 3.是否局限与链接 ,4.不再使用是否删除, 5其他的属性
		channel.queueDeclare(queueName, false, false , false, null);
		
		//上面的部分,与Test1是一样的
		//声明一个消费者，配置好获取消息的方式
		QueueingConsumer consumer = new QueueingConsumer(channel);
		channel.basicConsume(queueName, true, consumer);
		
		//循环获取消息
		while(true) {
			//循环获取消息
			//指向下一个消息，如果没有会一直阻塞
			Delivery delivery = consumer.nextDelivery();
			
			String msg = new String (delivery.getBody());
			System.out.println("接收  message[" + msg +"] from " + queueName);
		}
				
	}
}
